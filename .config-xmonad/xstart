#!/bin/bash
#
#   Xstart file -- to be launched by xsession or xinitrc
#   Man page: Xsession
#
#   TODO: This file really need some cleaning up!
#
#
# https://wiki.archlinux.org/index.php/ConsoleKit

# A a hack for one specific console
hostname=`hostname`
[[ $hostname == mat ]] \
    && xrandr --output VGA1 --right-of LVDS1 --primary \
    && xrandr --output VGA1 --mode 1920x1080

# First, try to kill everyhing that might be started below
# It's important that applications are launched from this
# environment to get the right settings.
killall -q devmon
killall -q gpg-agent
killall -q ssh-agent
killall -q gnome-keyring-daemon
killall -q gnome-settings-daemon
killall -q xbindkeys
killall -q blueman-applet
killall -q nm-applet
killall -q dropboxd
killall -q pulseaudio
sleep 0.4

# Launch a new dbus-session if not already running
dbuslaunch="`which dbus-launch 2>/dev/null`"
[ -n "$dbuslaunch" ] \
    && [ -x "$dbuslaunch" ] \
    && [ -z "$DBUS_SESSION_BUS_ADDRESS" ] \
    && eval `$dbuslaunch --sh-syntax --exit-with-session`

# Source default bash environment
[ -f "${HOME}/.bashrc" ] \
    && source "${HOME}/.bashrc"

# Ensure sane file permissions etc.
[ -f "${HOME}/.bin/home-fix" ] \
    && "${HOME}/.bin/home-fix"

# Load gtk2 style settings
[ -f "${HOME}/.gtkrc-2.0" ] \
    && export GTK2_RC_FILES="${HOME}/.gtkrc-2.0"

# Devmon udev mounter (part of udevil)
[ $(which devmon) ] \
    && devmon &

# Start gnupg or ssh agent
agent_file="$HOME/.gnupg/gpg-agent-info-$(hostname)"
unset GPG_AGENT_INFO; unset SSH_AUTH_SOCK; unset SSH_AGENT_PID
rm -f "${agent_file}"
if [ $(which gpg-agent) ]; then
    eval $(gpg-agent --daemon --sh --enable-ssh-support --write-env-file=${agent_file})
elif [ $(which ssh-agent) ]; then
    eval $(ssh-agent -s)
fi
export GPG_AGENT_INFO
export SSH_AUTH_SOCK
export SSH_AGENT_PID

touch ~/.config/darkmode

# Initialize gnome settings daemon
if [ $(which gnome-settings-daemon) ]; then
    gnome-settings-daemon 2>/dev/null &
    sleep 0.5
    (
        if [ $(which gconftool-2) ]; then
	        gconftool-2 -t bool -s /apps/nautilus/preferences/show_desktop false
	        gconftool-2 -t bool -s /desktop/gnome/volume_manager/automount_drives false
	        gconftool-2 -t bool -s /apps/gnome_settings_daemon/screensaver/start_screensaver false
	        gconftool-2 -t bool -s /apps/gnome-keyring/daemon-components/ssh false
	        gconftool-2 -t bool -s /desktop/gnome/background/draw_background false
	        gconftool-2 -t bool -s /apps/gnome_settings_daemon/plugins/background/active false
	        gconftool-2 -t bool -s /apps/gnome_settings_daemon/plugins/ubuntuone/active false
	        gconftool-2 -t bool -s /apps/gnome_settings_daemon/plugins/xrandr/active false
        fi
        if [ $(which dconf) ]; then
	        dconf write /org/gnome/settings-daemon/plugins/media-keys/active false
            dconf write /org/gnome/desktop/background/draw-background false
            dconf write /org/gnome/desktop/background/show-desktop-icons false
            dconf write /org/gnome/desktop/media-handling/automount false
            dconf write /org/gnome/desktop/media-handling/automount-open false
            dconf write /org/gnome/desktop/media-handling/automount-never true
            dconf write /org/gnome/desktop/screensaver/idle-activation-enabled false
            dconf write /org/gnome/desktop/sound/event-sounds false
            dconf write /org/gnome/settings-daemon/plugins/background/active false
            dconf write /org/gnome/settings-daemon/plugins/xsettings/active false
            dconf write /org/gnome/settings-daemon/plugins/keyboard/active false
            dconf write /org/gnome/settings-daemon/plugins/keybindings/active false
        fi
    ) &
fi

# load Xresources
[ -f "${HOME}/.Xresources" ] \
    && xrdb -nocpp "${HOME}/.Xresources"

# Start music player daemon if it's available
if [ $(which mpd) ]; then
    (
        sleep 4
        mkdir -p ~/.mpd/playlists
        mpd
        sleep 2
        # Avoid some madness
        if [ `which mpc` ]; then
            mpc -q repeat off
            mpc -q single off
            mpc -q consume off
        fi
        sleep 4
        # TODO: this file is removed at start up because scmpc can hang and resubmit the cache forever under some circumstances.
        [ -f $HOME/.scmpc/scmpc.cache ] \
            && rm $HOME/.scmpc/scmpc.cache
        [ $(which scmpc) ] \
            && [ -f $HOME/.scmpc/scmpc.conf ] \
            && scmpc
    ) &
fi

# Configure keyboard mode buttons
if [ -f $HOME/.bin-xmonad/kbd ]; then
    ${HOME}/.bin-xmonad/kbd
fi

# Launch org-mode popup
# [ $(which orgmode) ] \
#     && [ $(which urxvt) ] \
#     && urxvt -name xmessage -geometry 102x60 -e bash -c "orgmode;read" &

# Launch google chrome
[ $(which google-chrome) ] \
    && google-chrome --no-startup-window 2>/dev/null &

# Launch drop box
[ -x ~/.dropbox-dist/dropboxd ] \
    && ~/.dropbox-dist/dropboxd &

# Launch the network manager applet
[ $(which nm-applet) ] \
    && nm-applet --sm-disable &

# Launch the bluetooth manager applet
[ $(which blueman-applet) ] \
    && blueman-applet &

# Set the backbround color
[ $(which bgset ) ] \
    && bgset d &

# Set a default web browser
[ $(which www) ] \
    && BROWSER=$(which www) \
    && export BROWSER

# Load keyboard macros/launchers
# NOTE: it is very important that this is done
#       *AFTER* all env variables have been set
if [ -f $HOME/.xbindkeysrc ]; then
    if  [ $(which xbindkeys) ]; then
        xbindkeys
    else
        xmessage "Warning: xbindkeys is not found"
    fi
fi

# Function that displays a list of window managers to choose from.
wm_selection() {
    avail_vms=""
    for candidate in xmonad wmii pekwm awesome xfce4-session gnome-session openbox blackbox startfluxbox; do
        which $candidate && avail_vms="$avail_vms $candidate"
    done

    if [ $(which zenity) ]; then
        WM=$( zenity --list --title "ACTION?!?" --text "re-launch vm?" --column "Available window managers" $avail_vms )
    else
        xmessage "warning: zenity not found, no window manager selection possible"
    fi
}

# Set default window manger (xmonad) or try user selection
WM=""
if [ $(which xmonad) ]; then
    WM="xmonad"
else
    wm_selection
fi
[ "z" = "z$WM" ] \
    && xmessage "!!! No window manager found/selected !!!"

# Start the window manager
while [ ! "" = "$WM" ]; do
    ( ${WM} )
    wm_selection
done
